// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package docker

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadDockerxdp returns the embedded CollectionSpec for dockerxdp.
func loadDockerxdp() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_DockerxdpBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load dockerxdp: %w", err)
	}

	return spec, err
}

// loadDockerxdpObjects loads dockerxdp and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*dockerxdpObjects
//	*dockerxdpPrograms
//	*dockerxdpMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadDockerxdpObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadDockerxdp()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// dockerxdpSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dockerxdpSpecs struct {
	dockerxdpProgramSpecs
	dockerxdpMapSpecs
}

// dockerxdpSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dockerxdpProgramSpecs struct {
	Mydocker *ebpf.ProgramSpec `ebpf:"mydocker"`
}

// dockerxdpMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dockerxdpMapSpecs struct {
	IpMap *ebpf.MapSpec `ebpf:"ip_map"`
}

// dockerxdpObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadDockerxdpObjects or ebpf.CollectionSpec.LoadAndAssign.
type dockerxdpObjects struct {
	dockerxdpPrograms
	dockerxdpMaps
}

func (o *dockerxdpObjects) Close() error {
	return _DockerxdpClose(
		&o.dockerxdpPrograms,
		&o.dockerxdpMaps,
	)
}

// dockerxdpMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadDockerxdpObjects or ebpf.CollectionSpec.LoadAndAssign.
type dockerxdpMaps struct {
	IpMap *ebpf.Map `ebpf:"ip_map"`
}

func (m *dockerxdpMaps) Close() error {
	return _DockerxdpClose(
		m.IpMap,
	)
}

// dockerxdpPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadDockerxdpObjects or ebpf.CollectionSpec.LoadAndAssign.
type dockerxdpPrograms struct {
	Mydocker *ebpf.Program `ebpf:"mydocker"`
}

func (p *dockerxdpPrograms) Close() error {
	return _DockerxdpClose(
		p.Mydocker,
	)
}

func _DockerxdpClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed dockerxdp_bpfel_x86.o
var _DockerxdpBytes []byte
