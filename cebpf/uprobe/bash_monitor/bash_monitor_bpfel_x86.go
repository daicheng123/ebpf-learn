// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package bash_monitor

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadBash_monitor returns the embedded CollectionSpec for bash_monitor.
func loadBash_monitor() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Bash_monitorBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bash_monitor: %w", err)
	}

	return spec, err
}

// loadBash_monitorObjects loads bash_monitor and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bash_monitorObjects
//	*bash_monitorPrograms
//	*bash_monitorMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBash_monitorObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBash_monitor()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bash_monitorSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bash_monitorSpecs struct {
	bash_monitorProgramSpecs
	bash_monitorMapSpecs
}

// bash_monitorSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bash_monitorProgramSpecs struct {
	UretprobeBashReadline *ebpf.ProgramSpec `ebpf:"uretprobe_bash_readline"`
}

// bash_monitorMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bash_monitorMapSpecs struct {
	Events *ebpf.MapSpec `ebpf:"events"`
}

// bash_monitorObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBash_monitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type bash_monitorObjects struct {
	bash_monitorPrograms
	bash_monitorMaps
}

func (o *bash_monitorObjects) Close() error {
	return _Bash_monitorClose(
		&o.bash_monitorPrograms,
		&o.bash_monitorMaps,
	)
}

// bash_monitorMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBash_monitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type bash_monitorMaps struct {
	Events *ebpf.Map `ebpf:"events"`
}

func (m *bash_monitorMaps) Close() error {
	return _Bash_monitorClose(
		m.Events,
	)
}

// bash_monitorPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBash_monitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type bash_monitorPrograms struct {
	UretprobeBashReadline *ebpf.Program `ebpf:"uretprobe_bash_readline"`
}

func (p *bash_monitorPrograms) Close() error {
	return _Bash_monitorClose(
		p.UretprobeBashReadline,
	)
}

func _Bash_monitorClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bash_monitor_bpfel_x86.o
var _Bash_monitorBytes []byte
